make_normalization:
  assets_out:
    norm_file: 
      handler: Config
      path_template: "{root}/{dataset}/{working}{stage}/normalization.yaml"
  assets_in:
    cmb_map: {stage: make_sims}
    obs_maps: {stage: make_sims}
  dir_name: CMBNNCS_B_Extrema

preprocess:
  assets_out:
    cmb_map: 
      handler: NumpyMap
      path_template: "{root}/{dataset}/{working}{stage}/{split}/{sim}/cmb_map.npy"
    obs_maps: 
      handler: NumpyMap
      path_template: "{root}/{dataset}/{working}{stage}/{split}/{sim}/obs_{freq}_map.npy"
  assets_in:
    norm_file: {stage: make_normalization}
    cmb_map: {stage: make_sims}
    obs_maps: {stage: make_sims}
    planck_deltabandpass: {stage: raw}
  splits: &all_splits
    - train
    - valid
    - test
  dir_name: CMBNNCS_C_Preprocess
  make_stage_log: True

train:
  assets_out:
    model: 
      handler: PyTorchModel
      path_template: "{root}/{dataset}/{working}{stage}/model_{epoch}.pth"
  assets_in:
    norm_file: {stage: make_normalization}
    model: {stage: train}
    cmb_map: {stage: preprocess}
    obs_maps: {stage: preprocess}
  splits:
    - train
  dir_name: CMBNNCS_D_Model
  make_stage_log: True

predict:
  assets_out:
    cmb_map: 
      handler: NumpyMap
      path_template: "{root}/{dataset}/{working}{stage}/{split}/{sim}/cmb_map_pred_{epoch}.npy"
  assets_in:
    model: {stage: train}
    obs_maps: {stage: preprocess}
  splits:
    - ${splits.run_inference_on}
  epochs: ${use_epochs}
  dir_name: CMBNNCS_E_Predict
  make_stage_log: True

postprocess: &final_inference
  assets_out:
    cmb_map: 
      handler: HealpyMap
      path_template: "{root}/{dataset}/{working}{stage}/{split}/{sim}/cmb_map_post_{epoch}.fits"
  assets_in:
    norm_file: {stage: make_normalization}
    cmb_map: {stage: predict}
  splits:
    - ${splits.run_inference_on}
  epochs: ${use_epochs}
  dir_name: CMBNNCS_F_Postprocess
  make_stage_log: True

final_infer: *final_inference  # Used so that analysis code can find a consistent name

show_cmb_pred_cmbnncs:
  assets_out:
    cmb_map_render:
      handler: EmptyHandler
      path_template: "{root}/{dataset}/{working}{stage}/{split}/{sim}/cmb_{epoch}_{field}.png"
  assets_in:
    norm_file: {stage: make_normalization}
    cmb_map_pred: {stage: predict, orig_name: cmb_map}
    cmb_map_sim: {stage: make_sims, orig_name: cmb_map}
    planck_deltabandpass: {stage: raw}
  splits:
    - ${splits.run_inference_on}
  override_n_sims: ${n_show_cap}
  plot_min_max: 500                  # value, v: plots from -v to +v; null: allow MPL to choose; list (size 2): min and max val
  make_stage_log: False
  dir_name: Analysis_2B_Show_CMB_Pred
  epochs: ${use_epochs_imgs}


show_sims_prep_cmbnncs:
  assets_out:
    cmb_map_render:
      handler: EmptyHandler
      path_template: "{root}/{dataset}/{working}{stage}/{split}/{sim}/cmb_{field}.png"
    obs_map_render:
      handler: EmptyHandler
      path_template: "{root}/{dataset}/{working}{stage}/{split}/{sim}/obs_{field}_{freq}.png"
  assets_in:
    norm_file: {stage: make_normalization}
    cmb_map_sim: {stage: make_sims, orig_name: cmb_map}
    cmb_map_prep: {stage: preprocess, orig_name: cmb_map}
    obs_maps_sim: {stage: make_sims, orig_name: obs_maps}
    obs_maps_prep: {stage: preprocess, orig_name: obs_maps}
    planck_deltabandpass: {stage: raw}
  splits:
    - train
  override_n_sims: ${n_show_cap}
  plot_min_max: 500                  # value, v: plots from -v to +v; null: allow MPL to choose; list (size 2): min and max val
  dir_name: Analysis_2A_Show_Sims_Prep_CMBNNCS
  make_stage_log: False